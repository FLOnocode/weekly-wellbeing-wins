const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
  "Access-Control-Allow-Headers": "Content-Type, Authorization",
}

// Fallback nutrition responses when n8n is not configured
const nutritionFallbacks = [
  "Pour une alimentation √©quilibr√©e, je recommande de privil√©gier les l√©gumes verts, les prot√©ines maigres et les c√©r√©ales compl√®tes. Essayez d'inclure 5 portions de fruits et l√©gumes par jour ! ü•¨üçé",
  "Conseil nutrition : Buvez beaucoup d'eau (au moins 8 verres par jour) et limitez les aliments transform√©s. Les aliments riches en fibres comme les l√©gumineuses sont excellents pour la sati√©t√© ! üíßü´ò",
  "Pour maintenir un poids sant√©, privil√©giez les repas faits maison avec des ingr√©dients frais. N'oubliez pas les bonnes graisses comme l'avocat, les noix et l'huile d'olive ! ü•ëüå∞",
  "Astuce nutrition : Mangez lentement et √©coutez vos signaux de sati√©t√©. Ajoutez des √©pices et herbes fra√Æches pour rehausser le go√ªt sans calories suppl√©mentaires ! üåø‚ú®",
  "Pour une √©nergie stable, combinez prot√©ines et glucides complexes √† chaque repas. Pensez quinoa + l√©gumes + prot√©ines, c'est parfait ! üçΩÔ∏è‚ö°"
]

function getRandomNutritionAdvice(): string {
  return nutritionFallbacks[Math.floor(Math.random() * nutritionFallbacks.length)]
}

function generateContextualResponse(message: string): string {
  const lowerMessage = message.toLowerCase()
  
  if (lowerMessage.includes('photo') || lowerMessage.includes('image') || lowerMessage.includes('repas')) {
    return "Merci pour cette photo ! Pour analyser votre repas, je recommande de v√©rifier l'√©quilibre : 1/2 de l√©gumes, 1/4 de prot√©ines maigres, 1/4 de glucides complexes. Les couleurs vari√©es dans l'assiette sont un bon indicateur de diversit√© nutritionnelle ! üì∏ü•ó"
  }
  
  if (lowerMessage.includes('poids') || lowerMessage.includes('maigrir') || lowerMessage.includes('perdre')) {
    return "Pour une perte de poids saine, cr√©ez un d√©ficit calorique mod√©r√© en privil√©giant les aliments nutritifs et rassasiants. Combinez alimentation √©quilibr√©e et activit√© physique r√©guli√®re. Patience et constance sont cl√©s ! ‚öñÔ∏èüí™"
  }
  
  if (lowerMessage.includes('recette') || lowerMessage.includes('cuisine') || lowerMessage.includes('pr√©parer')) {
    return "Voici une id√©e de repas √©quilibr√© : Saumon grill√© avec quinoa et l√©gumes r√¥tis, assaisonn√©s √† l'huile d'olive et aux herbes. Simple, savoureux et nutritif ! Pour le dessert, optez pour des fruits frais avec un yaourt grec. üêüü•¨"
  }
  
  if (lowerMessage.includes('petit-d√©jeuner') || lowerMessage.includes('matin')) {
    return "Un petit-d√©jeuner √©quilibr√© pourrait inclure : flocons d'avoine avec fruits frais et noix, ou ≈ìufs brouill√©s avec avocat sur pain complet. N'oubliez pas de vous hydrater d√®s le r√©veil ! ü•£ü•ö"
  }
  
  if (lowerMessage.includes('sport') || lowerMessage.includes('exercice') || lowerMessage.includes('entra√Ænement')) {
    return "Avant l'exercice, privil√©giez des glucides facilement digestibles (banane, dattes). Apr√®s l'entra√Ænement, combinez prot√©ines et glucides pour la r√©cup√©ration (smoothie prot√©in√© avec fruits). Hydratez-vous bien ! üèÉ‚Äç‚ôÄÔ∏èüçå"
  }
  
  if (lowerMessage.includes('eau') || lowerMessage.includes('hydrat')) {
    return "L'hydratation est cruciale ! Visez 8-10 verres d'eau par jour. Vous pouvez varier avec des tisanes, eau infus√©e aux fruits, ou eau p√©tillante. Les fruits et l√©gumes riches en eau comptent aussi ! üíßüçâ"
  }
  
  // Default response
  return getRandomNutritionAdvice()
}

function extractMessageFromN8nResponse(responseText: string): string {
  console.log("üîç Raw n8n response text:", responseText)
  console.log("üîç Response text length:", responseText.length)
  console.log("üîç Response text type:", typeof responseText)

  // If the response is empty or just whitespace, return fallback
  if (!responseText || responseText.trim().length === 0) {
    console.log("‚ö†Ô∏è Empty response from n8n, using fallback")
    return getRandomNutritionAdvice()
  }

  // Try to parse as JSON first
  try {
    const jsonResponse = JSON.parse(responseText)
    console.log("‚úÖ Successfully parsed n8n response as JSON:", jsonResponse)
    console.log("üîç JSON response type:", typeof jsonResponse)
    console.log("üîç JSON response keys:", Object.keys(jsonResponse || {}))

    // Try different common message keys
    const possibleMessageKeys = ['message', 'response', 'text', 'output', 'result', 'content', 'data']
    
    for (const key of possibleMessageKeys) {
      if (jsonResponse && typeof jsonResponse === 'object' && jsonResponse[key]) {
        const messageValue = jsonResponse[key]
        if (typeof messageValue === 'string' && messageValue.trim().length > 0) {
          console.log(`‚úÖ Found message in key '${key}':`, messageValue)
          return messageValue.trim()
        }
      }
    }

    // If it's a simple string value in JSON
    if (typeof jsonResponse === 'string' && jsonResponse.trim().length > 0) {
      console.log("‚úÖ n8n response is a JSON string:", jsonResponse)
      return jsonResponse.trim()
    }

    // If it's an object but no message found, stringify it
    if (jsonResponse && typeof jsonResponse === 'object') {
      console.log("‚ö†Ô∏è JSON object found but no message key, stringifying")
      return JSON.stringify(jsonResponse)
    }

  } catch (parseError) {
    console.log("‚ö†Ô∏è Failed to parse n8n response as JSON:", parseError)
    console.log("üîÑ Treating as plain text response")
  }

  // If not JSON or JSON parsing failed, treat as plain text
  const trimmedText = responseText.trim()
  if (trimmedText.length > 0) {
    console.log("‚úÖ Using n8n response as plain text:", trimmedText)
    return trimmedText
  }

  // Final fallback
  console.log("‚ùå No valid content found in n8n response, using fallback")
  return getRandomNutritionAdvice()
}

Deno.serve(async (req: Request) => {
  // Handle CORS preflight requests
  if (req.method === "OPTIONS") {
    return new Response(null, {
      status: 200,
      headers: corsHeaders,
    })
  }

  try {
    // Only accept POST requests
    if (req.method !== "POST") {
      return new Response(
        JSON.stringify({ error: "Method not allowed" }),
        {
          status: 405,
          headers: {
            "Content-Type": "application/json",
            ...corsHeaders,
          },
        }
      )
    }

    // Parse the incoming request body
    const requestData = await req.json()
    const userMessage = requestData?.message || ""

    console.log("üì® Received request:", {
      hasData: !!requestData,
      messageLength: userMessage.length,
      message: userMessage.substring(0, 100) + (userMessage.length > 100 ? "..." : "")
    })

    // Get environment variables - check for the correct secret name
    const N8N_WEBHOOK_URL = Deno.env.get("N8N_WEBHOOK_URL") || Deno.env.get("N8N_RELAY_SSM_2K_CHALLENGE")
    const N8N_SECRET_KEY = Deno.env.get("N8N_SECRET_KEY")

    console.log("üîß Environment check:", {
      hasWebhookUrl: !!N8N_WEBHOOK_URL,
      hasSecretKey: !!N8N_SECRET_KEY,
      webhookUrlLength: N8N_WEBHOOK_URL?.length || 0
    })

    // If n8n is not configured, provide fallback nutrition advice
    if (!N8N_WEBHOOK_URL) {
      console.log("‚ö†Ô∏è N8N not configured (no webhook URL), providing fallback nutrition advice")
      
      const fallbackResponse = generateContextualResponse(userMessage)
      
      return new Response(
        JSON.stringify({ 
          message: fallbackResponse,
          source: "fallback",
          note: "Service de conseil nutrition en mode local. Pour des conseils personnalis√©s avanc√©s, configurez l'int√©gration n8n."
        }),
        {
          status: 200,
          headers: {
            "Content-Type": "application/json",
            ...corsHeaders,
          },
        }
      )
    }

    console.log("üöÄ Relaying request to n8n:", {
      url: N8N_WEBHOOK_URL.substring(0, 50) + "...",
      hasData: !!requestData,
      messageLength: userMessage.length,
    })

    // Prepare headers for n8n request
    const n8nHeaders: Record<string, string> = {
      "Content-Type": "application/json",
    }

    // Add secret key if available
    if (N8N_SECRET_KEY) {
      n8nHeaders["x-secret-key"] = N8N_SECRET_KEY
      console.log("üîê Added secret key to n8n request")
    }

    // Forward the request to n8n webhook
    const n8nResponse = await fetch(N8N_WEBHOOK_URL, {
      method: "POST",
      headers: n8nHeaders,
      body: JSON.stringify(requestData),
    })

    // Get the response from n8n
    const responseText = await n8nResponse.text()
    
    console.log("üì• n8n response received:", {
      status: n8nResponse.status,
      statusText: n8nResponse.statusText,
      hasResponse: !!responseText,
      responseLength: responseText.length,
      contentType: n8nResponse.headers.get("content-type")
    })

    // If n8n request fails, provide fallback
    if (!n8nResponse.ok) {
      console.log("‚ùå n8n request failed, providing fallback")
      console.log("‚ùå n8n error details:", {
        status: n8nResponse.status,
        statusText: n8nResponse.statusText,
        response: responseText.substring(0, 200)
      })
      
      const fallbackResponse = generateContextualResponse(userMessage)
      
      return new Response(
        JSON.stringify({ 
          message: fallbackResponse,
          source: "fallback_after_error",
          note: "Service temporairement indisponible, conseil nutrition de base fourni.",
          error: `n8n responded with ${n8nResponse.status}: ${n8nResponse.statusText}`
        }),
        {
          status: 200,
          headers: {
            "Content-Type": "application/json",
            ...corsHeaders,
          },
        }
      )
    }

    // Extract the message from n8n response
    const extractedMessage = extractMessageFromN8nResponse(responseText)

    console.log("‚úÖ Successfully extracted message from n8n:", {
      messageLength: extractedMessage.length,
      messagePreview: extractedMessage.substring(0, 100) + (extractedMessage.length > 100 ? "..." : "")
    })

    // Always return a consistent format with the message
    return new Response(
      JSON.stringify({
        message: extractedMessage,
        source: "n8n",
        timestamp: new Date().toISOString()
      }),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
          ...corsHeaders,
        },
      }
    )

  } catch (error) {
    console.error("üí• Error in relay-to-n8n function:", error)
    console.error("üí• Error details:", {
      name: error.name,
      message: error.message,
      stack: error.stack
    })
    
    // Provide fallback nutrition advice even on error
    const fallbackResponse = getRandomNutritionAdvice()
    
    return new Response(
      JSON.stringify({ 
        message: fallbackResponse,
        source: "error_fallback",
        note: "Une erreur s'est produite, mais voici un conseil nutrition utile !",
        error: error.message
      }),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
          ...corsHeaders,
        },
      }
    )
  }
})