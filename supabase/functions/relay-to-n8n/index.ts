const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
  "Access-Control-Allow-Headers": "Content-Type, Authorization",
}

// Fallback nutrition responses when n8n is not configured
const nutritionFallbacks = [
  "Pour une alimentation √©quilibr√©e, je recommande de privil√©gier les l√©gumes verts, les prot√©ines maigres et les c√©r√©ales compl√®tes. Essayez d'inclure 5 portions de fruits et l√©gumes par jour ! ü•¨üçé",
  "Conseil nutrition : Buvez beaucoup d'eau (au moins 8 verres par jour) et limitez les aliments transform√©s. Les aliments riches en fibres comme les l√©gumineuses sont excellents pour la sati√©t√© ! üíßü´ò",
  "Pour maintenir un poids sant√©, privil√©giez les repas faits maison avec des ingr√©dients frais. N'oubliez pas les bonnes graisses comme l'avocat, les noix et l'huile d'olive ! ü•ëüå∞",
  "Astuce nutrition : Mangez lentement et √©coutez vos signaux de sati√©t√©. Ajoutez des √©pices et herbes fra√Æches pour rehausser le go√ªt sans calories suppl√©mentaires ! üåø‚ú®",
  "Pour une √©nergie stable, combinez prot√©ines et glucides complexes √† chaque repas. Pensez quinoa + l√©gumes + prot√©ines, c'est parfait ! üçΩÔ∏è‚ö°"
]

function getRandomNutritionAdvice(): string {
  return nutritionFallbacks[Math.floor(Math.random() * nutritionFallbacks.length)]
}

function generateContextualResponse(message: string): string {
  const lowerMessage = message.toLowerCase()
  
  if (lowerMessage.includes('photo') || lowerMessage.includes('image') || lowerMessage.includes('repas')) {
    return "Merci pour cette photo ! Pour analyser votre repas, je recommande de v√©rifier l'√©quilibre : 1/2 de l√©gumes, 1/4 de prot√©ines maigres, 1/4 de glucides complexes. Les couleurs vari√©es dans l'assiette sont un bon indicateur de diversit√© nutritionnelle ! üì∏ü•ó"
  }
  
  if (lowerMessage.includes('poids') || lowerMessage.includes('maigrir') || lowerMessage.includes('perdre')) {
    return "Pour une perte de poids saine, cr√©ez un d√©ficit calorique mod√©r√© en privil√©giant les aliments nutritifs et rassasiants. Combinez alimentation √©quilibr√©e et activit√© physique r√©guli√®re. Patience et constance sont cl√©s ! ‚öñÔ∏èüí™"
  }
  
  if (lowerMessage.includes('recette') || lowerMessage.includes('cuisine') || lowerMessage.includes('pr√©parer')) {
    return "Voici une id√©e de repas √©quilibr√© : Saumon grill√© avec quinoa et l√©gumes r√¥tis, assaisonn√©s √† l'huile d'olive et aux herbes. Simple, savoureux et nutritif ! Pour le dessert, optez pour des fruits frais avec un yaourt grec. üêüü•¨"
  }
  
  if (lowerMessage.includes('petit-d√©jeuner') || lowerMessage.includes('matin')) {
    return "Un petit-d√©jeuner √©quilibr√© pourrait inclure : flocons d'avoine avec fruits frais et noix, ou ≈ìufs brouill√©s avec avocat sur pain complet. N'oubliez pas de vous hydrater d√®s le r√©veil ! ü•£ü•ö"
  }
  
  if (lowerMessage.includes('sport') || lowerMessage.includes('exercice') || lowerMessage.includes('entra√Ænement')) {
    return "Avant l'exercice, privil√©giez des glucides facilement digestibles (banane, dattes). Apr√®s l'entra√Ænement, combinez prot√©ines et glucides pour la r√©cup√©ration (smoothie prot√©in√© avec fruits). Hydratez-vous bien ! üèÉ‚Äç‚ôÄÔ∏èüçå"
  }
  
  if (lowerMessage.includes('eau') || lowerMessage.includes('hydrat')) {
    return "L'hydratation est cruciale ! Visez 8-10 verres d'eau par jour. Vous pouvez varier avec des tisanes, eau infus√©e aux fruits, ou eau p√©tillante. Les fruits et l√©gumes riches en eau comptent aussi ! üíßüçâ"
  }
  
  // Default response
  return getRandomNutritionAdvice()
}

Deno.serve(async (req: Request) => {
  // Handle CORS preflight requests
  if (req.method === "OPTIONS") {
    return new Response(null, {
      status: 200,
      headers: corsHeaders,
    })
  }

  try {
    // Only accept POST requests
    if (req.method !== "POST") {
      return new Response(
        JSON.stringify({ error: "Method not allowed" }),
        {
          status: 405,
          headers: {
            "Content-Type": "application/json",
            ...corsHeaders,
          },
        }
      )
    }

    // Parse the incoming request body
    const requestData = await req.json()
    const userMessage = requestData?.message || ""

    // Get environment variables
    const N8N_WEBHOOK_URL = Deno.env.get("N8N_WEBHOOK_URL")
    const N8N_SECRET_KEY = Deno.env.get("N8N_SECRET_KEY")

    // If n8n is not configured, provide fallback nutrition advice
    if (!N8N_WEBHOOK_URL || !N8N_SECRET_KEY) {
      console.log("N8N not configured, providing fallback nutrition advice")
      
      const fallbackResponse = generateContextualResponse(userMessage)
      
      return new Response(
        JSON.stringify({ 
          message: fallbackResponse,
          source: "fallback",
          note: "Service de conseil nutrition en mode local. Pour des conseils personnalis√©s avanc√©s, configurez l'int√©gration n8n."
        }),
        {
          status: 200,
          headers: {
            "Content-Type": "application/json",
            ...corsHeaders,
          },
        }
      )
    }

    console.log("Relaying request to n8n:", {
      url: N8N_WEBHOOK_URL,
      hasData: !!requestData,
      messageLength: userMessage.length,
    })

    // Forward the request to n8n webhook
    const n8nResponse = await fetch(N8N_WEBHOOK_URL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "x-secret-key": N8N_SECRET_KEY,
      },
      body: JSON.stringify(requestData),
    })

    // Get the response from n8n
    const responseText = await n8nResponse.text()
    
    console.log("n8n response:", {
      status: n8nResponse.status,
      hasResponse: !!responseText,
      responseLength: responseText.length,
    })

    // If n8n request fails, provide fallback
    if (!n8nResponse.ok) {
      console.log("n8n request failed, providing fallback")
      const fallbackResponse = generateContextualResponse(userMessage)
      
      return new Response(
        JSON.stringify({ 
          message: fallbackResponse,
          source: "fallback_after_error",
          note: "Service temporairement indisponible, conseil nutrition de base fourni."
        }),
        {
          status: 200,
          headers: {
            "Content-Type": "application/json",
            ...corsHeaders,
          },
        }
      )
    }

    // Parse the response as JSON if possible, otherwise return as text
    let responseData
    try {
      responseData = JSON.parse(responseText)
    } catch {
      responseData = { message: responseText }
    }

    // Return the n8n response to the client
    return new Response(
      JSON.stringify(responseData),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
          ...corsHeaders,
        },
      }
    )

  } catch (error) {
    console.error("Error in relay-to-n8n function:", error)
    
    // Provide fallback nutrition advice even on error
    const fallbackResponse = getRandomNutritionAdvice()
    
    return new Response(
      JSON.stringify({ 
        message: fallbackResponse,
        source: "error_fallback",
        note: "Une erreur s'est produite, mais voici un conseil nutrition utile !"
      }),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
          ...corsHeaders,
        },
      }
    )
  }
})